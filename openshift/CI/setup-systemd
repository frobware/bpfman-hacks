#!/usr/bin/env bash

set -euo pipefail

# Get the directory of this script.
script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
systemd_user_dir="$HOME/.config/systemd/user"

# Repositories to manage.
repos=(
    "openshift/bpfman-operator"
    "openshift/bpfman"
)

# Service types and their configurations.
declare -A service_configs
service_configs["ok2test-lgtm-approve"]="--lgtm --approve --ok-to-test"
service_configs["override-test-fmt"]="--throttle 15m --failing-check=ci/prow/test-fmt -c '/override ci/prow/test-fmt'"

usage() {
    echo "Usage: $0 {install|remove|status}"
    echo ""
    echo "Commands:"
    echo "  install  - Install and enable systemd user services and timers"
    echo "  remove   - Stop and remove systemd user services and timers"
    echo "  status   - Show status of systemd user services and timers"
    exit 1
}

install_services() {
    echo "Installing systemd user services and timers..."

    # Create systemd user directory if it doesn't exist.
    mkdir -p "$systemd_user_dir"

    for service_type in "${!service_configs[@]}"; do
        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "Installing ${service_name}.service and ${service_name}.timer..."

            # Create service file.
            cat > "$systemd_user_dir/${service_name}.service" << EOF
[Unit]
Description=Prow ${service_type} automation for ${repo}
After=network.target

[Service]
Type=oneshot
ExecStartPre=/bin/bash -c "autoprat --author red-hat-konflux --repo ${repo}"
ExecStart=/bin/bash -c "autoprat --author red-hat-konflux --repo ${repo} ${service_configs[$service_type]} -P | tee >(cat >&2) | sh"
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=default.target
EOF

            # Create timer file based on service type.
            if [[ "$service_type" == "ok2test-lgtm-approve" ]]; then
                timer_schedule="*:0/5"   # Every 5 minutes
            else
                timer_schedule="*:0/30"  # Every 30 minutes
            fi

            cat > "$systemd_user_dir/${service_name}.timer" << EOF
[Unit]
Description=Timer for Prow ${service_type} automation for ${repo}
Requires=${service_name}.service

[Timer]
OnCalendar=${timer_schedule}
Persistent=true

[Install]
WantedBy=timers.target
EOF

            # Reload systemd and enable/start the timer.
            systemctl --user daemon-reload
            systemctl --user enable "${service_name}.timer"
            systemctl --user start "${service_name}.timer"

            echo "${service_name}.service and ${service_name}.timer installed and started"
        done
    done

    echo ""
    echo "Services and timers installed successfully!"
    echo "Use 'systemctl --user status <service>.timer' to check timer status"
    echo "Use 'systemctl --user list-timers' to see all timers"
    echo "Use 'journalctl --user -u <service> -f' to follow logs"
}

remove_services() {
    echo "Removing systemd user services and timers..."

    for service_type in "${!service_configs[@]}"; do
        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "Removing ${service_name}.service and ${service_name}.timer..."

            # Stop and disable the timer and service.
            systemctl --user stop "${service_name}.timer" 2>/dev/null || true
            systemctl --user disable "${service_name}.timer" 2>/dev/null || true
            systemctl --user stop "${service_name}.service" 2>/dev/null || true
            systemctl --user disable "${service_name}.service" 2>/dev/null || true

            # Remove the files.
            rm -f "$systemd_user_dir/${service_name}.service"
            rm -f "$systemd_user_dir/${service_name}.timer"

            echo "${service_name}.service and ${service_name}.timer removed"
        done
    done

    # Reload systemd.
    systemctl --user daemon-reload

    echo ""
    echo "Services and timers removed successfully!"
}

show_status() {
    echo "Systemd user service and timer status:"
    echo ""

    for service_type in "${!service_configs[@]}"; do
        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "=== ${service_name}.timer ==="
            systemctl --user status "${service_name}.timer" --no-pager || true
            echo ""
            echo "=== ${service_name}.service ==="
            systemctl --user status "${service_name}.service" --no-pager || true
            echo ""
        done
    done

    echo "=== Active Timers ==="
    systemctl --user list-timers --no-pager || true
}

# Main script logic.
case "${1:-}" in
    install)
        install_services
        ;;
    remove)
        remove_services
        ;;
    status)
        show_status
        ;;
    *)
        usage
        ;;
esac
