#!/usr/bin/env bash

set -euo pipefail

# Get the directory of this script.
systemd_user_dir="$HOME/.config/systemd/user"

# Service job configurations and their associated repositories.
declare -A service_job_configs
service_job_configs["ok2test-lgtm-approve"]="--author app/red-hat-konflux --ok-to-test --lgtm --approve --title 'chore(deps): update ocp-bpfman'"
service_job_configs["override-test-fmt"]="--author app/red-hat-konflux --throttle 15m --failing-check=ci/prow/test-fmt -c '/override ci/prow/test-fmt'"
service_job_configs["deps-ubi-minimal"]="--author app/red-hat-konflux --ok-to-test --lgtm --approve --title 'chore(deps): update registry.access.redhat.com/ubi9/ubi-minimal docker tag to'"
service_job_configs["deps-golangci-lint"]="--author app/red-hat-konflux --ok-to-test --lgtm --approve --title 'chore(deps): update pre-commit hook golangci/golangci-lint to'"
service_job_configs["deps-lock-file-maintenance"]="--author app/red-hat-konflux --ok-to-test --lgtm --approve --title 'chore(deps): lock file maintenance'"

# Repository associations for each service job type.
declare -A service_job_repos
service_job_repos["ok2test-lgtm-approve"]="openshift/bpfman-operator openshift/bpfman"
service_job_repos["override-test-fmt"]="openshift/bpfman-operator"
service_job_repos["deps-ubi-minimal"]="openshift/bpfman-operator openshift/bpfman"
service_job_repos["deps-golangci-lint"]="openshift/bpfman"
service_job_repos["deps-lock-file-maintenance"]="openshift/bpfman"

usage() {
    echo "Usage: $0 {install|remove|status}"
    echo ""
    echo "Commands:"
    echo "  install  - Install and enable systemd user services and timers"
    echo "  remove   - Stop and remove systemd user services and timers"
    echo "  status   - Show status of systemd user services and timers"
    exit 1
}

install_services() {
    echo "Installing systemd user services and timers..."

    # Create systemd user directory if it doesn't exist.
    mkdir -p "$systemd_user_dir"

    for service_type in "${!service_job_configs[@]}"; do
        # Get the list of repositories for this service type.
        IFS=' ' read -ra repos <<< "${service_job_repos[$service_type]}"

        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "Installing ${service_name}.service and ${service_name}.timer..."

            # Create service file.
            cat > "$systemd_user_dir/${service_name}.service" << EOF
[Unit]
Description=Prow ${service_type} automation for ${repo}
After=network.target

[Service]
Type=oneshot
ExecStartPre=/bin/bash -l -c "autoprat --repo ${repo} ${service_job_configs[$service_type]}"
ExecStart=/bin/bash -l -c "autoprat --repo ${repo} ${service_job_configs[$service_type]} | tee >(cat >&2) | sh"
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=default.target
EOF

            # Create timer file based on service type.
            if [[ "$service_type" == "ok2test-lgtm-approve" ]]; then
                # Every 15 minutes, 8am-11pm, weekdays
                cat > "$systemd_user_dir/${service_name}.timer" << EOF
[Unit]
Description=Timer for Prow ${service_type} automation for ${repo}
Requires=${service_name}.service

[Timer]
OnCalendar=Mon..Fri *-*-* 08..23:00/15
Persistent=true

[Install]
WantedBy=timers.target
EOF
            else
                # Every 30 minutes, 8am-6pm, weekdays
                cat > "$systemd_user_dir/${service_name}.timer" << EOF
[Unit]
Description=Timer for Prow ${service_type} automation for ${repo}
Requires=${service_name}.service

[Timer]
OnCalendar=Mon..Fri *-*-* 08..17:00/30
Persistent=true

[Install]
WantedBy=timers.target
EOF
            fi

            # Reload systemd and enable/start the timer.
            systemctl --user daemon-reload
            systemctl --user enable "${service_name}.timer"
            systemctl --user start "${service_name}.timer"

            echo "${service_name}.service and ${service_name}.timer installed and started"
        done
    done

    echo ""
    echo "Services and timers installed successfully!"
    echo ""
    echo "Copy/paste these commands to monitor your services:"
    echo ""
    echo "# Check all timer status:"
    echo "systemctl --user list-timers"
    echo ""
    echo "# Monitor specific service logs:"

    for service_type in "${!service_job_configs[@]}"; do
        # Get the list of repositories for this service type.
        IFS=' ' read -ra repos <<< "${service_job_repos[$service_type]}"
        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"
            echo "journalctl --user -u ${service_name}.service -f"
        done
    done
}

remove_services() {
    echo "Removing systemd user services and timers..."

    for service_type in "${!service_job_configs[@]}"; do
        # Get the list of repositories for this service type.
        IFS=' ' read -ra repos <<< "${service_job_repos[$service_type]}"

        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "Removing ${service_name}.service and ${service_name}.timer..."

            # Stop and disable the timer and service.
            systemctl --user stop "${service_name}.timer" 2>/dev/null || true
            systemctl --user disable "${service_name}.timer" 2>/dev/null || true
            systemctl --user stop "${service_name}.service" 2>/dev/null || true
            systemctl --user disable "${service_name}.service" 2>/dev/null || true

            # Remove the files.
            rm -f "$systemd_user_dir/${service_name}.service"
            rm -f "$systemd_user_dir/${service_name}.timer"

            echo "${service_name}.service and ${service_name}.timer removed"
        done
    done

    # Reload systemd.
    systemctl --user daemon-reload

    echo ""
    echo "Services and timers removed successfully!"
}

show_status() {
    echo "Systemd user service and timer status:"
    echo ""

    for service_type in "${!service_job_configs[@]}"; do
        # Get the list of repositories for this service type.
        IFS=' ' read -ra repos <<< "${service_job_repos[$service_type]}"

        for repo in "${repos[@]}"; do
            # Create service name by combining type and repo.
            repo_slug=$(echo "$repo" | tr '/' '-')
            service_name="prow-${service_type}-${repo_slug}"

            echo "=== ${service_name}.timer ==="
            systemctl --user status "${service_name}.timer" --no-pager || true
            echo ""
            echo "=== ${service_name}.service ==="
            systemctl --user status "${service_name}.service" --no-pager || true
            echo ""
        done
    done

    echo "=== Active Timers ==="
    systemctl --user list-timers --no-pager || true
}

# Main script logic.
case "${1:-}" in
    install)
        install_services
        ;;
    remove)
        remove_services
        ;;
    status)
        show_status
        ;;
    *)
        usage
        ;;
esac
